---
layout:     post
title:      Алгоритми з розгалуженням
date:       2016-02-07
summary:    Реалізація алгоритмів з розгалуженням, методичка
categories: lits
---

Вивчаючи основи програмування потрібно освоїти не лише одну з мов програмування високого рівня, а й навчитися складати та аналізувати алгоритми розв’язку різних задач, і таким чином, виробити алгоритмічне мислення.

Поняття алгоритму є одним з фундаментальних понять в комп’ютерних науках. Воно виникло задовго до появи перших комп’ютерів і стало одним з основних у математиці. Вважається, що саме слово “алгоритм” походить від імені видатного математика середньовіччя Мухаммеда бен-Муси аль-Хорезмі. Він розробив алгоритм (правила) виконання арифметичих дій над десятковими числами, яким ми користуємось до сих пір. Тепер слово “алгоритм” використовується не тільки в математиці, так говорять про алгоритм гри у шахи, алгоритм керування різними процесами тощо.

Для розуміння поняття “алгоритм” та його ролі в програмуванні не обов’язково застосовувати строго математичний формалізм, достатньо дати тлумачення цього поняття на “інтуїтивному” рівні. Тут, в першу чергу, слід відзначити важливе значення поняття “виконавець алгоритму”. Алгоритм завжди повинен бути сформульованим у розрахунку на конкретного виконавця, тобто він має бути керівництвом до дій для виконавця. Саме тому, значення слова “алгоритм” є схожим за змістом до значення слів “вказівка”, “інструкція”. Можна стверджувати, що __алгоритм – це зрозумілі й точні вказівки виконавцю (комп’ютеру) здійснити певну послідовність дій (обчислювальних операцій) для розв’язання поставленої задачі.__

Будь-який алгоритм стає алгоритмом лише тоді, коли він набере якої-небудь форми. В програмуванні склалися повністю визначені традиції в поданні алгоритмів, а саме розрізняють такі форми запису алгоритмів:

- словесний запис алгоритму (розмовна мова);
- псевдокод (структурно-стилізована мова);
- блок-схема (мова графічних символів);
- комп’ютерна програма (мова програмування високого рівня)

 *Словесний запис алгоритму* орієнтований, взагалі кажучи, на людину як виконавця. В програмуванні він використовується лише на першому етапі розробки програми, коли потрібно подати алгоритм в цілому, усвідомити послідовність виконання дій та логічні зв’язки між ними, проглянути можливі варіанти. Словесна форма допускає найбільшу свободу дій в способах опису як послідовності дій, так і рівня їх деталізації, і таким чином вона є найменш формалізованою і строгою.

Наступним кроком у напрямку підвищення рівня формалізації опису алгоритму є використання так званого псевдокоду. Псевдокод – це система позначень і правил, призначена для одноманітного запису алгоритмів. У псевдокоді відсутні строгі синтаксичні правила для запису команд, тому програма на псевдокоді не може виконуватися комп’ютером. Його призначення – допомогти розробнику “осмислити” програму перед тим як спробувати її написати мовою програмування такою як С++. А завдяки наявності конструкцій, які притаманні мовам програмування, значно полегшується перехід від детально підготовленої програми на псевдокоді до програми написаної мовою JavaScript.

На одному рівні формалізації опису алгоритму поряд з псевдокодом знаходиться графічна форма опису у вигляді блок-схеми. Основною перевагою блок-схем над псевдокодом є більша наочність подання алгоритму. Але для великих алгоритмів ця перевага втрачається. В блок-схемах для позначення алгоритму використовуються спеціальні символи у вигляді найпрос­тіших геометричних фігур, які називаються блоками. Блоки з’єднуються за допомогою стрілок, які називаються лініями зв’язку і які вказують на черговість виконання. Самі команди поміщаються усередину блоків і можуть набувати, взагалі кажучи, довільної форми, наприклад, задаватися словами (хоча в такому випадку формалізація опису зменшуються). Блок-схеми можуть використовуватися як для опису повного алгоритму, так і для опису деякого фрагменту алгоритма.

З певних комбінацій блоку виконання дій та логічного блоку створюються керуючі структури або базові конструкції алгоритмів. В теорії алгоритмів доведено, що будь-який алгоритм може бути побудований з використанням всього лише трьох базових конструкцій, а саме з **конструкцій слідування, розгалуження та повторення**. Це перетворює процес побудови алгоритму в його “збірку” з набору базових конструкцій. Блок-схеми керуючих структур можна розглядати як блок-схеми фрагментів алгоритму, тобто вони починатимуться з блоку злиття, який буде відігравати роль точки входу в структуру і закінчуватися також цим блоком, який буде точкою виходу з структури. Таке трактування керуючих структур з одним входом і одним виходом значно полегшує процес побудови алгоритму шляхом збирання з базових конструкцій – керуючі структури зв’язуються послідовно шляхом з’єднання точки виходу однієї з них з точкою входу іншої. Іншим способом збирання цілого алгоритму з базових конструкцій є вкладення однієї керуючої структури в іншу. Його ми розглянемо детально пізніше.

Під час запису алгоритму у словесній формі, у вигляді блок-схеми чи на псевдокоді допускається певна довільність в записі команд. На практиці як виконавець алгоритмів використовують комп’ютер, тому алгоритм має бути записаний мовою “зрозумілою” комп’ютером. Тут на перший план виступає необхідність точного запису команд, яка не залишає місця для довільного тлумачення їх виконавцем. Тому мова для запису алгоритму має бути строго формалізована – вона називається мовою програмування, а форма алгоритму цією мовою – комп’ютерною програмою або просто програмою.

Отже, будь-який алгоритм може бути побудований з використанням всього лише трьох базових конструкцій, а саме конструкцій слідування, розгалуження та повторення. Структура слідування вбудована в мові JavaScript. Це означає, що оператори програми виконуються один за одним в тій послідовності, в якій вони записані у тексті програми, поки не буде вказано інший порядок виконання.

Організація розгалуження в С++ здійснюється за допомогою трьох типів програмних структур вибору: оператора умови if з одиничним вибором, оператора умови <a href="http://www.w3schools.com/js/js_if_else.asp">if/else</a> з подвійним вибором і оператора вибору <a href="http://www.w3schools.com/js/js_switch.asp">switch</a> з множинним вибором. Конструкція повторення реалізується в JavaScript за допомогою трьох операторів циклу: оператора циклу з передумовою **while**, оператора циклу з післяумовою **do/while** і оператора циклу з параметром **for**.  
